import Mathlib

open Set Filter ENNReal NNReal TopologicalSpace
open scoped symmDiff Topology

section atTopAbove

variable {Œ± : Type*} [Preorder Œ±] (p : Œ± ‚Üí Prop)

def atTopAbove : Filter Œ± :=
  ‚®Ö (a : Œ±) (_ : p a), Filter.principal (Set.Ici a)

lemma atTopAbove_eq : atTopAbove p = ‚®Ö a ‚àà {x | p x}, Filter.principal (Set.Ici a) := by rfl

lemma mem_atTopAbove_iff_of_directed {s : Set Œ±} (h‚ÇÄ : {y | p y}.Nonempty) (h‚ÇÅ : DirectedOn (fun x y ‚Ü¶ x ‚â§ y) p) : s ‚àà atTopAbove p ‚Üî ‚àÉ (x : Œ±) (_ : p x), s ‚àà Filter.principal (Set.Ici x) := by
  rw [atTopAbove_eq, mem_biInf_of_directed _ h‚ÇÄ]
  ¬∑ exact Iff.symm bex_def
  ¬∑ rw [‚Üê directedOn_image]
    intro x hx y hy
    obtain ‚ü®s, ‚ü®hs1, hs2‚ü©‚ü© := hx
    obtain ‚ü®t, ‚ü®ht1, ht2‚ü©‚ü© := hy
    simp only [mem_image, mem_setOf_eq, ge_iff_le, exists_exists_and_eq_and]
    obtain ‚ü®u, hu1, hu2, hu3‚ü© := h‚ÇÅ s hs1 t ht1
    use u
    refine ‚ü®hu1, hs2.symm ‚ñ∏ ?_, ht2.symm ‚ñ∏ ?_‚ü© <;> simp [hu2, hu3]

end atTopAbove

section Set

variable {Œ± : Type*} {p : Set Œ± ‚Üí Prop}

lemma directedOn_of_unionMem (hp : ‚àÄ (s : Set Œ±) (_ : p s) (t : Set Œ±) (_ : p t), p (s ‚à™ t)) : DirectedOn (Œ± := Set Œ±) (fun s t ‚Ü¶ s ‚äÜ t) p :=
  fun x hx y hy ‚Ü¶ ‚ü®x ‚à™ y, ‚ü®hp x hx y hy, union_subset_iff.mp fun ‚¶É_‚¶Ñ a => a‚ü©‚ü©

lemma mem_atTopAbove_iff_of_unionMem (a : Set (Set Œ±)) (h : {s : Set Œ± | p s }.Nonempty) (hp : ‚àÄ (s : Set Œ±) (_ : p s) (t : Set Œ±) (_ : p t), p (s ‚à™ t)) : a ‚àà atTopAbove p ‚Üî ‚àÉ K : Set Œ±, p K ‚àß ((Filter.principal K).sets ‚äÜ a) := by
  rw [mem_atTopAbove_iff_of_directed p h (directedOn_of_unionMem hp)]
  simp_all only [mem_principal, exists_prop]
  rfl

end Set

section isCompact

variable {Œ± : Type*} [TopologicalSpace Œ±]

lemma mem_iInf_of_isCompact (a : Set (Set Œ±)) : a ‚àà atTopAbove IsCompact ‚Üî
    ‚àÉ K : Set Œ±, IsCompact K ‚àß ((ùìü K).sets ‚äÜ a) :=
  mem_atTopAbove_iff_of_unionMem a ‚ü®‚àÖ, isCompact_empty‚ü© (fun _ hs _ ht => IsCompact.union hs ht)

lemma mem_iInf_of_isCompactSubset (a : Set (Set Œ±)) (t : Set Œ±) : a ‚àà atTopAbove
    (fun s ‚Ü¶ IsCompact s ‚àß s ‚äÜ t) ‚Üî ‚àÉ K : Set Œ±, (IsCompact K ‚àß K ‚äÜ t) ‚àß ((ùìü K).sets ‚äÜ a) :=
  mem_atTopAbove_iff_of_unionMem a ‚ü®‚àÖ, ‚ü®isCompact_empty, empty_subset t‚ü©‚ü©
    (fun _ ‚ü®hs1, hs2‚ü© _ ‚ü®hu1, hu2‚ü© ‚Ü¶ ‚ü®IsCompact.union hs1 hu1, union_subset hs2 hu2‚ü©)

end isCompact

namespace MeasureTheory

namespace Measure

section innerRegular

variable {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] (‚Ñô : Measure Œ±) [IsProbabilityMeasure ‚Ñô]

lemma mem_nhdsIci_iff (x : ‚Ñù‚â•0‚àû) : s ‚àà nhdsSet (Ici x) ‚Üî ‚àÉ r < x,  Ioi r ‚äÜ s := by
  sorry

lemma innerRegular_iff (p q : Set Œ± ‚Üí Prop) (h‚ÇÄ : p ‚àÖ) (hp : ‚àÄ (s : Set Œ±) (_ : p s) (t : Set Œ±) (_ : p t), p (s ‚à™ t)) : ‚Ñô.InnerRegularWRT p q ‚Üî ‚àÄ (t : Set Œ±) (ht : q t ‚àß 0 < ‚Ñô t), Tendsto (fun s ‚Ü¶ ‚Ñô s) (atTopAbove (fun s ‚Ü¶ p s ‚àß s ‚äÜ t)) (nhdsSet (Ici (‚Ñô t))) := by
  have h‚ÇÄ' (t : Set Œ±): {s | p s ‚àß s ‚äÜ t}.Nonempty := ‚ü®‚àÖ, ‚ü®h‚ÇÄ, empty_subset t‚ü©‚ü©
  have hp' (u : Set Œ±) : ‚àÄ (s : Set Œ±) (_ : p s ‚àß s ‚äÜ u) (t : Set Œ±) (_ : p t ‚àß t ‚äÜ u), p (s ‚à™ t) ‚àß s ‚à™ t ‚äÜ u := fun s ‚ü®hs1, hs2‚ü© t ‚ü®ht1, ht2‚ü© ‚Ü¶ ‚ü®hp s hs1 t ht1, union_subset hs2 ht2‚ü©
  simp only [InnerRegularWRT]
  simp_rw [tendsto_iff_forall_eventually_mem, mem_nhdsIci_iff]
  change _ ‚Üî (‚àÄ t, q t ‚àß ‚Ñô t > 0‚Üí ‚àÄ s, _ ‚Üí {x | ‚Ñô x ‚àà s} ‚àà atTopAbove fun s => p s ‚àß s ‚äÜ t)
  conv => right ; right ; right ; right ; right ;  rw [mem_atTopAbove_iff_of_unionMem _ (h‚ÇÄ' _) (hp' _)]
  refine ‚ü®fun h t ht ‚Ü¶ fun s hs ‚Ü¶ ?_, fun h t ht r hr ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®r, ‚ü®hr1, hr2‚ü©‚ü© := hs
    obtain ‚ü®K, ‚ü®hK1, hK2, hK3‚ü©‚ü© := h ht.1 r hr1
    refine ‚ü®K, ‚ü®hK2, hK1‚ü©, fun L hL ‚Ü¶ hr2 <| lt_of_lt_of_le hK3 <| OuterMeasureClass.measure_mono ‚Ñô hL‚ü©
  ¬∑ specialize h t ‚ü®ht, lt_of_le_of_lt (zero_le r) hr‚ü© (Ioi r) _
    ¬∑ use r, hr
    ¬∑ obtain ‚ü®K, ‚ü®hK2, hK1‚ü©, hK3‚ü© := h
      exact ‚ü®K, hK1, hK2, hK3 fun ‚¶Éa‚¶Ñ a => a‚ü©

end innerRegular


section tightMeasureSet

variable {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] (‚Ñô : Measure Œ±) [IsProbabilityMeasure ‚Ñô]

def IsTightMeasureSet (S : Set (Measure Œ±)) := Tendsto (fun A ‚Ü¶ ‚®Ü ‚Ñô ‚àà S, ‚Ñô A·∂ú) (atTopAbove IsCompact) (nhds 0)

lemma isTightMeasureSet_iff {S : Set (Measure Œ±)} :
    IsTightMeasureSet S ‚Üî ‚àÄ Œµ > 0, ‚àÉ K : Set Œ±, IsCompact K ‚àß ‚àÄ ‚Ñô ‚àà S, ‚Ñô K·∂ú ‚â§ Œµ := by
  simp only [IsTightMeasureSet]
  simp_rw [ENNReal.tendsto_nhds_zero, Filter.eventually_iff, mem_iInf_of_isCompact]
  refine ‚ü®fun h Œµ hŒµ ‚Ü¶ ?_, fun h Œµ hŒµ ‚Ü¶ ?_‚ü© <;> obtain ‚ü®K, hK, hKŒµ‚ü© := h Œµ hŒµ <;> refine ‚ü®K, hK, ?_‚ü©
  ¬∑ specialize hKŒµ (fun ‚¶Éa‚¶Ñ a => a)
    simp only [iSup_le_iff, mem_setOf_eq] at hKŒµ
    exact hKŒµ
  ¬∑ intro L hL
    simp only [Filter.mem_sets, mem_principal, iSup_le_iff, mem_setOf_eq] at hL ‚ä¢
    intro ‚Ñô h‚Ñô
    specialize hKŒµ ‚Ñô h‚Ñô
    rw [‚Üê compl_subset_compl] at hL
    exact le_trans (OuterMeasureClass.measure_mono ‚Ñô hL) hKŒµ

end tightMeasureSet

end Measure

end MeasureTheory
