import Mathlib

open Set Filter ENNReal NNReal TopologicalSpace
open scoped symmDiff Topology

section atTopOf

def atTopOf [LE Œ±] (p : Œ± ‚Üí Prop) : Filter Œ± :=
  ‚®Ö K ‚àà {K' | p K'}, ùìü {B | K ‚â§ B}

lemma mem_atTopOf_iff_of_directed [Preorder Œ±] (p : Œ± ‚Üí Prop) (h‚ÇÄ : {K' | p K'}.Nonempty) (h‚ÇÅ : DirectedOn (fun x y ‚Ü¶ x ‚â§ y) p) : s ‚àà atTopOf p ‚Üî ‚àÉ x ‚àà {y | p y}, s ‚àà ùìü {b | x ‚â§ b} := by
  simp only [atTopOf]
  rw [mem_biInf_of_directed _ h‚ÇÄ]
  refine directedOn_image.mp ?_
  simp only [DirectedOn] at h‚ÇÅ ‚ä¢
  intro x hx y hy
  simp only [mem_image, mem_setOf_eq] at hx hy
  obtain ‚ü®s, ‚ü®hs1, hs2‚ü©‚ü© := hx
  obtain ‚ü®t, ‚ü®ht1, ht2‚ü©‚ü© := hy
  simp only [mem_image, mem_setOf_eq, ge_iff_le, exists_exists_and_eq_and]
  obtain ‚ü®u, hu1, hu2, hu3‚ü© := h‚ÇÅ s hs1 t ht1
  use u
  refine ‚ü®hu1, ?_, ?_‚ü©
  ¬∑ rw [‚Üê hs2]
    simp only [le_principal_iff, mem_principal, setOf_subset_setOf]
    intro a ha
    apply le_trans hu2 ha
  ¬∑ rw [‚Üê ht2]
    simp only [le_principal_iff, mem_principal, setOf_subset_setOf]
    intro a ha
    apply le_trans hu3 ha

variable {Œ± : Type*} [TopologicalSpace Œ±]

lemma directedOn_of_isCompact : DirectedOn (Œ± := Set Œ±) (fun s t ‚Ü¶ s ‚äÜ t) IsCompact :=
  fun x hx y hy ‚Ü¶ ‚ü®x ‚à™ y, ‚ü®IsCompact.union hx hy, union_subset_iff.mp fun ‚¶É_‚¶Ñ a => a‚ü©‚ü©

lemma isCompact_nonempty : {K : Set Œ±| IsCompact K}.Nonempty :=
  ‚ü®‚àÖ, isCompact_empty‚ü©

lemma mem_iInf_of_isCompact (a : Set (Set Œ±)) : a ‚àà atTopOf IsCompact ‚Üî ‚àÉ K : Set Œ±, IsCompact K ‚àß ((ùìü K).sets ‚äÜ a) := by
  rw [mem_atTopOf_iff_of_directed _ isCompact_nonempty directedOn_of_isCompact]
  simp only [mem_setOf_eq, le_eq_subset, mem_principal]
  rfl

end atTopOf

namespace MeasureTheory

namespace Measure

section tightMeasureSet

variable {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] (‚Ñô : Measure Œ±) [IsProbabilityMeasure ‚Ñô]

def IsTightMeasureSet (S : Set (Measure Œ±)) := Tendsto (fun A ‚Ü¶ ‚®Ü ‚Ñô ‚àà S, ‚Ñô A·∂ú) (atTopOf IsCompact) (nhds 0)

lemma isTightMeasureSet_iff {S : Set (Measure Œ±)} :
    IsTightMeasureSet S ‚Üî ‚àÄ Œµ > 0, ‚àÉ K : Set Œ±, IsCompact K ‚àß ‚àÄ ‚Ñô ‚àà S, ‚Ñô K·∂ú ‚â§ Œµ := by
  simp only [IsTightMeasureSet]
  simp_rw [ENNReal.tendsto_nhds_zero, Filter.eventually_iff, mem_iInf_of_isCompact]
  refine ‚ü®fun h Œµ hŒµ ‚Ü¶ ?_, fun h Œµ hŒµ ‚Ü¶ ?_‚ü© <;> obtain ‚ü®K, hK, hKŒµ‚ü© := h Œµ hŒµ <;> refine ‚ü®K, hK, ?_‚ü©
  ¬∑ specialize hKŒµ (fun ‚¶Éa‚¶Ñ a => a)
    simp only [iSup_le_iff, mem_setOf_eq] at hKŒµ
    exact hKŒµ
  ¬∑ intro L hL
    simp only [Filter.mem_sets, mem_principal, iSup_le_iff, mem_setOf_eq] at hL ‚ä¢
    intro ‚Ñô h‚Ñô
    specialize hKŒµ ‚Ñô h‚Ñô
    rw [‚Üê compl_subset_compl] at hL
    exact le_trans (OuterMeasureClass.measure_mono ‚Ñô hL) hKŒµ

end tightMeasureSet

end Measure

end MeasureTheory
