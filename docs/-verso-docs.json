{"9":
 "<code>MeasureTheory.Measure.InnerRegularWRT.{u_1} {α : Type u_1} {x✝ : MeasurableSpace α} (μ : Measure α)\n  (p q : Set α → Prop) : Prop</code><span class=\"sep\"></span><code class=\"docstring\">We say that a measure `μ` is *inner regular* with respect to predicates `p q : Set α → Prop`,\nif for every `U` such that `q U` and `r &lt; μ U`, there exists a subset `K ⊆ U` satisfying `p K`\nof measure greater than `r`.\n\nThis definition is used to prove some facts about regular and weakly regular measures without\nrepeating the proofs. </code>",
 "8":
 "<code class=\"docstring\">The universe of propositions. `Prop ≡ Sort 0`.\n\nEvery proposition is propositionally equal to either `True` or `False`. </code>",
 "7":
 "<code>MeasureTheory.Measure.{u_6} (α : Type u_6) [MeasurableSpace α] : Type u_6</code><span class=\"sep\"></span><code class=\"docstring\">A measure is defined to be an outer measure that is countably additive on\nmeasurable sets, with the additional assumption that the outer measure is the canonical\nextension of the restricted measure.\n\nThe measure of a set `s`, denoted `μ s`, is an extended nonnegative real. The real-valued version\nis written `μ.real s`.\n</code>",
 "6": "<code>Measure α</code>",
 "5":
 "<code>MeasurableSpace.{u_7} (α : Type u_7) : Type u_7</code><span class=\"sep\"></span><code class=\"docstring\">A measurable space is a space equipped with a σ-algebra. </code>",
 "4":
 "<code>TopologicalSpace.{u} (X : Type u) : Type u</code><span class=\"sep\"></span><code class=\"docstring\">A topology on `X`. </code>",
 "3": "<code class=\"docstring\">The universe parameter u_1</code>",
 "2":
 "<code class=\"docstring\">A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. </code>",
 "16":
 "<code>Filter.principal.{u_1} {α : Type u_1} (s : Set α) : Filter α</code><span class=\"sep\"></span><code class=\"docstring\">The principal filter of `s` is the collection of all supersets of `s`. </code>",
 "15":
 "<code>Set.{u} (α : Type u) : Type u</code><span class=\"sep\"></span><code class=\"docstring\">A set is a collection of elements of some type `α`.\n\nAlthough `Set` is defined as `α → Prop`, this is an implementation detail which should not be\nrelied on. Instead, `setOf` and membership of a set (`∈`) should be used to convert between sets\nand predicates.\n</code>",
 "14":
 "<code>Filter.{u_1} (α : Type u_1) : Type u_1</code><span class=\"sep\"></span><code class=\"docstring\">A filter `F` on a type `α` is a collection of sets of `α` which contains the whole `α`,\nis upwards-closed, and is stable under intersection. We do not forbid this collection to be\nall sets of `α`. </code>",
 "13":
 "<code>atTopCompact.{u_1} {α : Type u_1} [TopologicalSpace α] : Filter (Set α)</code>",
 "12":
 "<code>Set.univ.{u} {α : Type u} : Set α</code><span class=\"sep\"></span><code class=\"docstring\">The universal set on a type `α` is the set containing all elements of `α`.\n\nThis is conceptually the \"same as\" `α` (in set theory, it is actually the same), but type theory\nmakes the distinction that `α` is a type while `Set.univ` is a term of type `Set α`. `Set.univ` can\nitself be coerced to a type `↥Set.univ` which is in bijection with (but distinct from) `α`. </code>",
 "11": "<code>Set α</code>",
 "10":
 "<code>IsCompact.{u_1} {X : Type u_1} [TopologicalSpace X] (s : Set X) : Prop</code><span class=\"sep\"></span><code class=\"docstring\">A set `s` is compact if for every nontrivial filter `f` that contains `s`,\nthere exists `a ∈ s` such that every set of `f` meets every neighborhood of `a`. </code>",
 "1": "<code>Type u_1</code>",
 "0":
 "<code>MeasureTheory.Measure.IsTight.{u_1} {α : Type u_1} [TopologicalSpace α] [MeasurableSpace α] (ℙ : Measure α) : Prop</code>"}